{"version":3,"file":"static/js/1930.23d70035.chunk.js","mappings":"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","sources":["components/PaginationButtons.tsx","components/bootstrap/Option.tsx","components/bootstrap/Pagination.tsx","components/bootstrap/forms/Select.tsx","hooks/useSortableData.ts","pages/presentation/Common_page/Tags/AddTag.tsx","pages/presentation/Common_page/Tags/Tag_Edit.tsx","pages/presentation/Common_page/Tags/Delete.tsx","pages/presentation/Common_page/Tags/tags.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport PropTypes from 'prop-types';\nimport { CardFooter, CardFooterLeft, CardFooterRight } from './bootstrap/Card';\nimport Pagination, { PaginationItem } from './bootstrap/Pagination';\nimport Select from './bootstrap/forms/Select';\nimport Option from './bootstrap/Option';\n\nexport const PER_COUNT = {\n\t3: 3,\n\t5: 5,\n\t10: 10,\n\t25: 25,\n\t50: 50,\n};\n\n// export const dataPagination = (data: any[], currentPage: number, perPage: number) =>\n// \tdata.filter(\n// \t\t(i, index) => index - -1 >= (currentPage - 1) * perPage ,\n// \t);\nexport const dataPagination = (data: any[], currentPage: number, perPage: number) => {\n\tconst totalItems = data.length;\n\tconst startIndex = totalItems - (currentPage * perPage);\n\tconst endIndex = totalItems - ((currentPage - 1) * perPage);\n\t\n\t// Make sure to return only items that are within the bounds of the array\n\treturn data.slice(Math.max(startIndex, 0), Math.min(endIndex, totalItems)).reverse();\n};\n\n\n\ninterface IPaginationButtonsProps {\n\tsetCurrentPage(...args: unknown[]): unknown;\n\tcurrentPage: number;\n\tperPage: number;\n\tsetPerPage(...args: unknown[]): unknown;\n\tdata: unknown[];\n\tlabel?: string;\n}\nconst PaginationButtons: FC<IPaginationButtonsProps> = ({\n\tsetCurrentPage,\n\tcurrentPage,\n\tperPage,\n\tsetPerPage,\n\tdata,\n\tlabel,\n}) => {\n\tconst totalItems = data.length;\n\tconst totalPage = Math.ceil(totalItems / perPage);\n\n\tconst pagination = () => {\n\t\tlet items = [];\n\n\t\tlet i = currentPage - 1;\n\t\twhile (i >= currentPage - 1 && i > 0) {\n\t\t\titems.push(\n\t\t\t\t<PaginationItem key={i} onClick={() => setCurrentPage(currentPage - 1)}>\n\t\t\t\t\t{i}\n\t\t\t\t</PaginationItem>,\n\t\t\t);\n\n\t\t\ti -= 1;\n\t\t}\n\n\t\titems = items.reverse();\n\n\t\titems.push(\n\t\t\t<PaginationItem key={currentPage} isActive onClick={() => setCurrentPage(currentPage)}>\n\t\t\t\t{currentPage}\n\t\t\t</PaginationItem>,\n\t\t);\n\n\t\ti = currentPage + 1;\n\t\twhile (i <= currentPage + 1 && i <= totalPage) {\n\t\t\titems.push(\n\t\t\t\t<PaginationItem key={i} onClick={() => setCurrentPage(currentPage + 1)}>\n\t\t\t\t\t{i}\n\t\t\t\t</PaginationItem>,\n\t\t\t);\n\n\t\t\ti += 1;\n\t\t}\n\n\t\treturn items;\n\t};\n\n\tconst getInfo = () => {\n\t\tconst start = perPage * (currentPage - 1) + 1;\n\n\t\tconst end = perPage * currentPage;\n\n\t\treturn (\n\t\t\t<span className='pagination__desc'>\n\t\t\t\tShowing {start} to {end > totalItems ? totalItems : end} of {totalItems} {label}\n\t\t\t</span>\n\t\t);\n\t};\n\n\treturn (\n\t\t<CardFooter>\n\t\t\t<CardFooterLeft>\n\t\t\t\t<span className='text-muted'>{getInfo()}</span>\n\t\t\t</CardFooterLeft>\n\n\t\t\t<CardFooterRight className='d-flex'>\n\t\t\t\t{totalPage > 1 && (\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t<Pagination ariaLabel={label}>\n\t\t\t\t\t\t<PaginationItem\n\t\t\t\t\t\t\tisFirst\n\t\t\t\t\t\t\tisDisabled={!(currentPage - 1 > 0)}\n\t\t\t\t\t\t\tonClick={() => setCurrentPage(1)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<PaginationItem\n\t\t\t\t\t\t\tisPrev\n\t\t\t\t\t\t\tisDisabled={!(currentPage - 1 > 0)}\n\t\t\t\t\t\t\tonClick={() => setCurrentPage(currentPage - 1)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{currentPage - 1 > 1 && (\n\t\t\t\t\t\t\t<PaginationItem onClick={() => setCurrentPage(currentPage - 2)}>\n\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t</PaginationItem>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{pagination()}\n\t\t\t\t\t\t{currentPage + 1 < totalPage && (\n\t\t\t\t\t\t\t<PaginationItem onClick={() => setCurrentPage(currentPage + 2)}>\n\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t</PaginationItem>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<PaginationItem\n\t\t\t\t\t\t\tisNext\n\t\t\t\t\t\t\tisDisabled={!(currentPage + 1 <= totalPage)}\n\t\t\t\t\t\t\tonClick={() => setCurrentPage(currentPage + 1)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<PaginationItem\n\t\t\t\t\t\t\tisLast\n\t\t\t\t\t\t\tisDisabled={!(currentPage + 1 <= totalPage)}\n\t\t\t\t\t\t\tonClick={() => setCurrentPage(totalPage)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Pagination>\n\t\t\t\t)}\n\n\t\t\t\t<Select\n\t\t\t\t\tsize='sm'\n\t\t\t\t\tariaLabel='Per'\n\t\t\t\t\tonChange={(e: { target: { value: string } }) => {\n\t\t\t\t\t\tsetPerPage(parseInt(e.target.value, 10));\n\t\t\t\t\t\tsetCurrentPage(1);\n\t\t\t\t\t}}\n\t\t\t\t\tvalue={perPage.toString()}>\n\t\t\t\t\t{Object.keys(PER_COUNT).map((i) => (\n\t\t\t\t\t\t<Option key={i} value={i}>\n\t\t\t\t\t\t\t{i}\n\t\t\t\t\t\t</Option>\n\t\t\t\t\t))}\n\t\t\t\t</Select>\n\t\t\t</CardFooterRight>\n\t\t</CardFooter>\n\t);\n};\nPaginationButtons.propTypes = {\n\tsetCurrentPage: PropTypes.func.isRequired,\n\tcurrentPage: PropTypes.number.isRequired,\n\tperPage: PropTypes.number.isRequired,\n\tsetPerPage: PropTypes.func.isRequired,\n\t// eslint-disable-next-line react/forbid-prop-types\n\tdata: PropTypes.array.isRequired,\n\tlabel: PropTypes.string,\n};\nPaginationButtons.defaultProps = {\n\tlabel: 'items',\n};\n\nexport default PaginationButtons;\n","import React, { FC, HTMLAttributes } from 'react';\nimport PropTypes from 'prop-types';\n\ninterface IOptionProps extends HTMLAttributes<HTMLOptionElement> {\n\tchildren: string;\n\tvalue?: string | number;\n\tdisabled?: boolean;\n\tariaLabelledby?: string | null;\n}\nconst Option: FC<IOptionProps> = ({ children, value, disabled, ariaLabelledby, ...props }) => {\n\treturn (\n\t\t<option\n\t\t\tvalue={value}\n\t\t\tdisabled={disabled}\n\t\t\taria-labelledby={ariaLabelledby || children}\n\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t{...props}>\n\t\t\t{children}\n\t\t</option>\n\t);\n};\nOption.propTypes = {\n\tchildren: PropTypes.string.isRequired,\n\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tdisabled: PropTypes.bool,\n\tariaLabelledby: PropTypes.string,\n};\nOption.defaultProps = {\n\tdisabled: false,\n\tariaLabelledby: null,\n\tvalue: undefined,\n};\n\nexport interface IOptionsProps {\n\tlist: {\n\t\tvalue?: string | number;\n\t\ttext?: string | number;\n\t\tlabel?: string | number;\n\t}[];\n}\n// @ts-ignore\nexport const Options: FC<IOptionsProps> = ({ list }) => {\n\treturn list?.map((item) => (\n\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t<Option key={item.value} value={item.value} {...item}>\n\t\t\t{(item.text as string) || (item.label as string)}\n\t\t</Option>\n\t));\n};\nOptions.propTypes = {\n\t// @ts-ignore\n\tlist: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t\ttext: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t\tlabel: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t}),\n\t).isRequired,\n};\n\nexport default Option;\n","import React, { forwardRef, HTMLAttributes, ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../icon/Icon';\n\ninterface IPaginationItemProps extends HTMLAttributes<HTMLLIElement> {\n\tclassName?: string;\n\tisDisabled?: boolean;\n\tisActive?: boolean;\n\tisPrev?: boolean;\n\tisFirst?: boolean;\n\tisNext?: boolean;\n\tisLast?: boolean;\n\tchildren?: ReactNode;\n\tonClick?(...args: unknown[]): unknown | undefined;\n}\nexport const PaginationItem = forwardRef<HTMLLIElement, IPaginationItemProps>(\n\t(\n\t\t{\n\t\t\tclassName,\n\t\t\tisDisabled,\n\t\t\tisActive,\n\t\t\tisPrev,\n\t\t\tisFirst,\n\t\t\tisNext,\n\t\t\tisLast,\n\t\t\tchildren,\n\t\t\tonClick,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\treturn (\n\t\t\t<li\n\t\t\t\tref={ref}\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'page-item',\n\t\t\t\t\t{\n\t\t\t\t\t\tdisabled: isDisabled,\n\t\t\t\t\t\tactive: isActive,\n\t\t\t\t\t},\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t\t{...props}>\n\t\t\t\t<span\n\t\t\t\t\trole='button'\n\t\t\t\t\tonClick={onClick}\n\t\t\t\t\tonKeyDown={onClick}\n\t\t\t\t\tclassName='page-link'\n\t\t\t\t\ttabIndex={isDisabled ? -1 : undefined}\n\t\t\t\t\taria-disabled={isDisabled ? 'true' : undefined}\n\t\t\t\t\taria-label={\n\t\t\t\t\t\t(isPrev && 'First Page') || (isNext && 'Last Page') || `${children} page`\n\t\t\t\t\t}>\n\t\t\t\t\t{isPrev && <Icon icon='ChevronLeft' />}\n\t\t\t\t\t{isFirst && <Icon icon='FirstPage' />}\n\t\t\t\t\t{isNext && <Icon icon='ChevronRight' />}\n\t\t\t\t\t{isLast && <Icon icon='LastPage' />}\n\t\t\t\t\t{children}\n\t\t\t\t</span>\n\t\t\t</li>\n\t\t);\n\t},\n);\nPaginationItem.displayName = 'PaginationItem';\nPaginationItem.propTypes = {\n\tclassName: PropTypes.string,\n\tisDisabled: PropTypes.bool,\n\tisActive: PropTypes.bool,\n\tisPrev: PropTypes.bool,\n\tisFirst: PropTypes.bool,\n\tisNext: PropTypes.bool,\n\tisLast: PropTypes.bool,\n\tchildren: PropTypes.node,\n\tonClick: PropTypes.func,\n};\nPaginationItem.defaultProps = {\n\tclassName: undefined,\n\tisDisabled: false,\n\tisActive: false,\n\tisPrev: false,\n\tisFirst: false,\n\tisNext: false,\n\tisLast: false,\n\tchildren: null,\n\tonClick: undefined,\n};\n\ninterface IPaginationProps extends HTMLAttributes<HTMLElement> {\n\tariaLabel: string;\n\tchildren:\n\t\t| ReactElement<IPaginationItemProps>\n\t\t| ReactElement<IPaginationItemProps>[]\n\t\t| ReactNode\n\t\t| ReactNode[];\n\tclassName?: string | undefined;\n\tsize?: 'sm' | 'lg' | null;\n}\nconst Pagination = forwardRef<HTMLDivElement, IPaginationProps>(\n\t({ ariaLabel, className, children, size, ...props }, ref) => {\n\t\treturn (\n\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t<nav ref={ref} aria-label={ariaLabel} className={className} {...props}>\n\t\t\t\t<ul className={classNames('pagination', { [`pagination-${size}`]: size }, 'm-0')}>\n\t\t\t\t\t{children}\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t);\n\t},\n);\nPagination.displayName = 'Pagination';\nPagination.propTypes = {\n\tariaLabel: PropTypes.string.isRequired,\n\tchildren: PropTypes.node.isRequired,\n\tclassName: PropTypes.string,\n\tsize: PropTypes.oneOf(['sm', 'lg']),\n};\nPagination.defaultProps = {\n\tclassName: undefined,\n\tsize: null,\n};\n\nexport default Pagination;\n","import React, { forwardRef, HTMLAttributes, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Option, { IOptionsProps, Options } from '../Option';\nimport Validation from './Validation';\n\ninterface ISelectProps extends Partial<IOptionsProps>, HTMLAttributes<HTMLSelectElement> {\n\tid?: string;\n\tclassName?: string;\n\tname?: string;\n\tchildren?: ReactNode;\n\tariaLabel: string;\n\tplaceholder?: string;\n\tsize?: 'lg' | 'sm';\n\tmultiple?: boolean;\n\tdisabled?: boolean;\n\trequired?: boolean;\n\tariaDescribedby?: string;\n\tariaLabelledby?: string;\n\ttitle?: string;\n\tvalue?: string | string[];\n\tdefaultValue?: string | string[];\n\tisTouched?: boolean;\n\tisValid?: boolean;\n\tinvalidFeedback?: string;\n\tvalidFeedback?: string;\n\tisValidMessage?: boolean;\n\tisTooltipFeedback?: boolean;\n\tonBlur?(...args: unknown[]): unknown;\n\tonChange?(...args: unknown[]): unknown;\n\tonFocus?(...args: unknown[]): unknown;\n\tonInput?(...args: unknown[]): unknown;\n\tonInvalid?(...args: unknown[]): unknown;\n\tonSelect?(...args: unknown[]): unknown;\n}\nconst Select = forwardRef<HTMLSelectElement, ISelectProps>(\n\t(\n\t\t{\n\t\t\tid,\n\t\t\tname,\n\t\t\tclassName,\n\t\t\tchildren,\n\t\t\trequired,\n\t\t\tplaceholder,\n\t\t\tariaDescribedby,\n\t\t\tariaLabelledby,\n\t\t\tariaLabel,\n\t\t\tlist,\n\t\t\tmultiple,\n\t\t\ttitle,\n\t\t\tsize,\n\t\t\tdisabled,\n\t\t\tvalue,\n\t\t\tdefaultValue,\n\t\t\tisValid,\n\t\t\tisTouched,\n\t\t\tinvalidFeedback,\n\t\t\tvalidFeedback,\n\t\t\tisValidMessage,\n\t\t\tisTooltipFeedback,\n\t\t\tonBlur,\n\t\t\tonChange,\n\t\t\tonFocus,\n\t\t\tonInput,\n\t\t\tonInvalid,\n\t\t\tonSelect,\n\t\t\t...props\n\t\t},\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\tref,\n\t) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<select\n\t\t\t\t\tref={ref}\n\t\t\t\t\tid={id}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'form-select',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[`form-select-${size}`]: size,\n\t\t\t\t\t\t\t'text-muted': value === '' && placeholder,\n\t\t\t\t\t\t\t'is-invalid': !isValid && isTouched && invalidFeedback,\n\t\t\t\t\t\t\t'is-valid': !isValid && isTouched && !invalidFeedback,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t)}\n\t\t\t\t\tname={name}\n\t\t\t\t\taria-label={ariaLabel}\n\t\t\t\t\taria-describedby={ariaDescribedby}\n\t\t\t\t\taria-labelledby={ariaLabelledby}\n\t\t\t\t\tmultiple={multiple}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\ttitle={title}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tdefaultValue={defaultValue}\n\t\t\t\t\trequired={required}\n\t\t\t\t\tonBlur={onBlur}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tonFocus={onFocus}\n\t\t\t\t\tonInput={onInput}\n\t\t\t\t\tonInvalid={onInvalid}\n\t\t\t\t\tonSelect={onSelect}\n\t\t\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t\t\t{...props}>\n\t\t\t\t\t{placeholder && (\n\t\t\t\t\t\t<Option value='' hidden>\n\t\t\t\t\t\t\t{placeholder}\n\t\t\t\t\t\t</Option>\n\t\t\t\t\t)}\n\t\t\t\t\t{children || (list && <Options list={list} />)}\n\t\t\t\t</select>\n\t\t\t\t{isValidMessage && (\n\t\t\t\t\t<Validation\n\t\t\t\t\t\tisTouched={isTouched}\n\t\t\t\t\t\tinvalidFeedback={invalidFeedback}\n\t\t\t\t\t\tvalidFeedback={validFeedback}\n\t\t\t\t\t\tisTooltip={isTooltipFeedback}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t},\n);\nSelect.displayName = 'Select';\nSelect.propTypes = {\n\tid: PropTypes.string,\n\tclassName: PropTypes.string,\n\t/**\n\t * If the name value is left blank, the id value is assigned.\n\t */\n\tname: PropTypes.string,\n\tchildren: PropTypes.node,\n\tariaLabel: PropTypes.string.isRequired,\n\tplaceholder: PropTypes.string,\n\tsize: PropTypes.oneOf(['lg', 'sm']),\n\tmultiple: PropTypes.bool,\n\t/**\n\t * A *disabled* element isn't editable and isn't sent on submit.\n\t */\n\tdisabled: PropTypes.bool,\n\trequired: PropTypes.bool,\n\tariaDescribedby: PropTypes.string,\n\tariaLabelledby: PropTypes.string,\n\ttitle: PropTypes.string,\n\t/**\n\t * For formik ***`formik.values.ID_OR_NAME`***\n\t */\n\t// @ts-ignore\n\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\t// @ts-ignore\n\tdefaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\t// @ts-ignore\n\tlist: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t\ttext: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t\tlabel: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t}),\n\t),\n\t/**\n\t * For formik ***`formik.touched.ID_OR_NAME`***\n\t */\n\tisTouched: PropTypes.bool,\n\t/**\n\t * For formik ***`formik.isValid`***\n\t */\n\tisValid: PropTypes.bool,\n\t/**\n\t * For formik ***`formik.errors.ID_OR_NAME`***\n\t */\n\tinvalidFeedback: PropTypes.string,\n\tvalidFeedback: PropTypes.string,\n\tisValidMessage: PropTypes.bool,\n\tisTooltipFeedback: PropTypes.bool,\n\t/**\n\t * Fires the moment that the element loses focus. For formik ***`formik.handleBlur`***\n\t */\n\tonBlur: PropTypes.func,\n\t/**\n\t * Fires the moment when the value of the element is changed. For formik ***`formik.handleChange`***\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Fires the moment when the element gets focus\n\t */\n\tonFocus: PropTypes.func,\n\t/**\n\t * Script to be run when an element gets user input\n\t */\n\tonInput: PropTypes.func,\n\t/**\n\t * Script to be run when an element is invalid\n\t */\n\tonInvalid: PropTypes.func,\n\t/**\n\t * Fires after some text has been selected in an element\n\t */\n\tonSelect: PropTypes.func,\n\t/**\n\t * More information, [react-input-mask](https://github.com/sanniassin/react-input-mask#react-input-mask).\n\t */\n};\nSelect.defaultProps = {\n\tid: undefined,\n\tclassName: undefined,\n\tname: undefined,\n\tchildren: null,\n\tplaceholder: undefined,\n\tmultiple: false,\n\tsize: undefined,\n\tdisabled: false,\n\trequired: false,\n\tariaDescribedby: undefined,\n\tariaLabelledby: undefined,\n\ttitle: undefined,\n\tvalue: undefined,\n\tdefaultValue: undefined,\n\tlist: undefined,\n\tisTouched: false,\n\tisValid: false,\n\tinvalidFeedback: undefined,\n\tvalidFeedback: undefined,\n\tisValidMessage: true,\n\tisTooltipFeedback: false,\n\tonBlur: undefined,\n\tonChange: undefined,\n\tonFocus: undefined,\n\tonInput: undefined,\n\tonInvalid: undefined,\n\tonSelect: undefined,\n};\n\nexport default Select;\n","import { useMemo, useState } from 'react';\n\nconst useSortableData = (items: any[], config = null) => {\n\tconst [sortConfig, setSortConfig] = useState(config);\n\n\tconst sortedItems = useMemo(() => {\n\t\tconst sortableItems = [...items];\n\t\tif (sortConfig !== null) {\n\t\t\tsortableItems.sort((a, b) => {\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (a[sortConfig.key] < b[sortConfig.key]) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn sortConfig.direction === 'ascending' ? -1 : 1;\n\t\t\t\t}\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (a[sortConfig.key] > b[sortConfig.key]) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn sortConfig.direction === 'ascending' ? 1 : -1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}\n\t\treturn sortableItems;\n\t}, [items, sortConfig]);\n\n\tconst requestSort = (key: any) => {\n\t\tlet direction = 'ascending';\n\t\t// @ts-ignore\n\t\tif (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n\t\t\tdirection = 'descending';\n\t\t}\n\t\t// @ts-ignore\n\t\tsetSortConfig({ key, direction });\n\t};\n\n\tconst getClassNamesFor = (key: any) => {\n\t\tif (!sortConfig) {\n\t\t\treturn 'd-none';\n\t\t}\n\t\t// eslint-disable-next-line consistent-return\n\t\t// @ts-ignore\n\t\treturn sortConfig.key === key ? sortConfig.direction : 'd-none';\n\t};\n\n\treturn { items: sortedItems, requestSort, getClassNamesFor, sortConfig };\n};\n\nexport default useSortableData;\n","import React, { FC, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport dayjs from 'dayjs';\nimport * as Yup from 'yup';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport Modal, {\n\tModalBody,\n\tModalFooter,\n\tModalHeader,\n\tModalTitle,\n} from '../../../../components/bootstrap/Modal';\nimport data from '../../../../common/data/dummyCustomerData';\nimport showNotification from '../../../../components/extras/showNotification';\nimport Icon from '../../../../components/icon/Icon';\nimport FormGroup from '../../../../components/bootstrap/forms/FormGroup';\nimport Input from '../../../../components/bootstrap/forms/Input';\nimport Card, {\n\tCardBody,\n\tCardHeader,\n\tCardLabel,\n\tCardTitle,\n} from '../../../../components/bootstrap/Card';\nimport Button from '../../../../components/bootstrap/Button';\nimport Label from '../../../../components/bootstrap/forms/Label';\nimport Checks, { ChecksGroup } from '../../../../components/bootstrap/forms/Checks';\nimport PAYMENTS from '../../../../common/data/enumPaymentMethod';\nimport {\n\tcreateUser,\n\tfetchUser,\n\tfetchupdateUser,\n} from '../../../../redux/Slice/UserManagement_slice';\n\nimport { createProfile } from '../../../../redux/Api/UserManagement';\nimport { getColorNameWithIndex } from '../../../../common/data/enumColors';\nimport { getFirstLetter } from '../../../../helpers/helpers';\nimport useDarkMode from '../../../../hooks/useDarkMode';\nimport { getAllInterest } from '../../../../redux/Slice/IntersetSlice';\nimport { create_roles, fetchRoles } from '../../../../redux/Slice/role_Slice';\nimport Spinner from '../../../../components/bootstrap/Spinner';\nimport { create_modes, fetchModes } from '../../../../redux/Slice/Modes_Slice';\nimport { create_tag_SubCategorys, getAll_Tag_SubCategorys } from '../../../../redux/Slice/Tag_Slice  ';\nimport { getAll_Tag_categorys } from '../../../../redux/Slice/Tag_Category_Slice ';\nimport { log } from 'console';\n\ninterface ICustomerEditModalProps {\n\tid: string;\n\tisOpen: boolean;\n\tsetIsOpen(...args: unknown[]): unknown;\n}\nconst Addmodal: FC<ICustomerEditModalProps> = ({ id, isOpen, setIsOpen }) => {\n\tconst { darkModeStatus } = useDarkMode();\n\tconst dispatch = useDispatch();\n\tconst modeid = localStorage.getItem('modeid');\n\tconst [errorHandling, setErrorHandling] = useState(false);\n\tconst [isLoading, setIsLoading] = useState<boolean>(false);\n\n\n\tconst stateCategory: any = useSelector((state: any) => state.TagCategory);\n\t// const CategoryData = stateCategory.modes.data\n\tconst CategoryData = Array.isArray(stateCategory?.modes?.data) ? stateCategory.modes.data : [];\n\tconst stateMode: any = useSelector((state: any) => state.mode);\n\t// const ModeData = stateMode.modes.data\n\tconst ModeData = Array.isArray(stateMode?.modes?.data) ? stateMode.modes.data : [];\n\n\t// console.log(\"check the data of category\", ModeData);\n\tuseEffect(() => {\n\t\tdispatch(fetchModes({}) as any);\n\t\tdispatch(getAll_Tag_categorys({}) as any);\n\t\t// dispatch(getbyID_Tag_Categorys({ ID: id }) as any);\n\t\t// dispatch(all_mode_with_Admins({}) as any);\n\n\t}, [dispatch]);\n\n\tconst userValidation = Yup.object().shape({\n\t\tname: Yup.string().required('Name is required'),\n\t\tdisplay_name: Yup.string().required('Display name is required'),\n\t\tdescription: Yup.string().required('Description is required'),\n\t\tnote: Yup.string().required('Note is required'),\n\t\tadmin_note: Yup.string().required('Admin note is required'),\n\t});\n\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\tname: '',\n\t\t\tdisplay_name: '',\n\t\t\tdescription: '',\n\t\t\tnote: '',\n\t\t\tadmin_note: '',\n\t\t\ttagcategories_ids: [\n\t\t\t\t{\n\t\t\t\t\t_id: \"\",\n\t\t\t\t}\n\t\t\t] as unknown as string[],\n\t\t\tmode: \"\",\n\n\t\t},\n\t\tenableReinitialize: true,\n\t\tvalidationSchema: userValidation,\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\tonSubmit: async (values: any) => {\n\t\t\t// console.log(values, \"valuesvaluesvalues\");\n\n\t\t\tsetIsLoading(true);\n\t\t\ttry {\n\n\t\t\t\tsetErrorHandling(true);\n\t\t\t\tawait dispatch(create_tag_SubCategorys({ values }) as any);\n\t\t\t\tsetIsLoading(false);\n\t\t\t\tdispatch(getAll_Tag_SubCategorys('') as any);\n\t\t\t} catch (error) { }\n\t\t\tsetIsOpen(false);\n\t\t\tshowNotification(\n\t\t\t\t<span className='d-flex align-items-center '>\n\t\t\t\t\t<Icon icon='Info' size='lg' className='me-1' />\n\t\t\t\t\t<span>Update Successfully</span>\n\t\t\t\t</span>,\n\t\t\t\t'Tag has been Updated successfully',\n\t\t\t);\n\t\t},\n\t});\n\n\tif (id || id === '0') {\n\t\treturn (\n\t\t\t<Modal isOpen={isOpen} setIsOpen={setIsOpen} size='md' titleId={id.toString()}>\n\t\t\t\t<ModalHeader setIsOpen={setIsOpen} className='p-4'>\n\t\t\t\t\t<ModalTitle id={id}>Add New Tag</ModalTitle>\n\t\t\t\t</ModalHeader>\n\t\t\t\t<ModalBody className='px-4'>\n\t\t\t\t\t<div className='row g-4'>\n\t\t\t\t\t\t<FormGroup id='name' label='Name *' className='col-md-12'>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tname='name'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.name}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.name && formik.errors.name ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>{formik.errors.name as any}</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t\t<FormGroup id='display_name' label='Display Name *' className='col-md-12'>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tname='display_name'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.display_name}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.display_name && formik.errors.display_name ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>\n\t\t\t\t\t\t\t\t\t{formik.errors.display_name as any}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t\t<FormGroup id='description' label='Description *' className='col-md-12'>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tname='description'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.description}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.description && formik.errors.description ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>\n\t\t\t\t\t\t\t\t\t{formik.errors.description as any}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t\t<FormGroup id='note' label='Note *' className='col-md-12'>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tname='note'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.note}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.note && formik.errors.note ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>{formik.errors.note as any}</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t\t<FormGroup id='admin_note' label='Admin Note *' className='col-md-12'>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tname='admin_note'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.admin_note}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.admin_note && formik.errors.admin_note ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>\n\t\t\t\t\t\t\t\t\t{formik.errors.admin_note as any}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t{/* <FormGroup id='name' label='Tag Category *' className='col-md-12'>\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tname='name'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.name} // Use the correct value\n\t\t\t\t\t\t\t\tclassName={`form-control ${formik.touched.name && formik.errors.name ? 'is-invalid' : ''}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value='' label='Select an option' />\n\t\t\t\t\t\t\t\t{ CategoryData.map((item :any) => (\n\t\t\t\t\t\t\t\t\t<option key={item?.name?.value} value={item?.name?.value}>\n\t\t\t\t\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t</FormGroup> */}\n\t\t\t\t\t\t{/* <FormGroup id='tagcategories_ids' label='Tag Category *' className='col-md-6'>\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tname='tagcategories_ids'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.tagcategories_ids[\"\"]} // Use the correct formik value\n\t\t\t\t\t\t\t\tclassName={`form-control ${formik.touched.tagcategories_ids && formik.errors.tagcategories_ids ? 'is-invalid' : ''}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value='' label='Select an option' />\n\t\t\t\t\t\t\t\t{CategoryData?.map((item: any,index :any) => (\n\t\t\t\t\t\t\t\t\t<option key={index} value={item?.id}>\n\t\t\t\t\t\t\t\t\t\t{item?.name} \n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</FormGroup> */}\n\t\t\t\t\t\t<FormGroup id='tagcategories_ids' label='Tag Category *' className='col-md-6'>\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tname='tagcategories_ids'\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t// Update the state with the selected ID in an array format\n\t\t\t\t\t\t\t\t\tformik.setFieldValue('tagcategories_ids', [e.target.value]);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvalue={formik.values.tagcategories_ids[0] || ''} // Use the first element of the array or default to empty string\n\t\t\t\t\t\t\t\tclassName={`form-control ${formik.touched.tagcategories_ids && formik.errors.tagcategories_ids ? 'is-invalid' : ''}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value='' label='Select an option' />\n\t\t\t\t\t\t\t\t{CategoryData?.map((item: any, index: any) => (\n\t\t\t\t\t\t\t\t\t<option key={index} value={item?._id}>\n\t\t\t\t\t\t\t\t\t\t{item?.name}\n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t{formik.touched.tagcategories_ids && formik.errors.tagcategories_ids ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>{formik.errors.tagcategories_ids as any}</div>\n\t\t\t\t\t\t\t) : <></>}\n\t\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t\t{/* <FormGroup id='mode' label='MODE *' className='col-md-6'>\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tname='mode'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.mode} // Use the correct formik value\n\t\t\t\t\t\t\t\tclassName={`form-control ${formik.touched.mode && formik.errors.mode ? 'is-invalid' : ''}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value='' label='Select an option' />\n\t\t\t\t\t\t\t\t{ModeData?.map((item: any, index: any) => (\n\t\t\t\t\t\t\t\t\t<option key={index} value={item?.id}>\n\t\t\t\t\t\t\t\t\t\t{item?.name}\n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</select>\n\n\t\t\t\t\t\t</FormGroup> */}\n\n\t\t\t\t\t\t<FormGroup id='mode' label='MODE *' className='col-md-6'>\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tname='mode'\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t// Update Formik's mode value with the selected option's value\n\t\t\t\t\t\t\t\t\tformik.setFieldValue('mode', e.target.value);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvalue={formik.values.mode} // Use the correct formik value\n\t\t\t\t\t\t\t\tclassName={`form-control ${formik.touched.mode && formik.errors.mode ? 'is-invalid' : ''}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value='' label='Select an option' />\n\t\t\t\t\t\t\t\t{ModeData?.map((item: any, index: any) => (\n\t\t\t\t\t\t\t\t\t<option key={index} value={item?._id}>\n\t\t\t\t\t\t\t\t\t\t{item?.name}\n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t{formik.touched.mode && formik.errors.mode ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>{formik.errors.mode as any}</div>\n\t\t\t\t\t\t\t) : <></>}\n\t\t\t\t\t\t</FormGroup>\n\n\n\t\t\t\t\t</div>\n\t\t\t\t</ModalBody>\n\t\t\t\t<ModalFooter className='px-4 pb-4'>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor='info'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tformik.handleSubmit();\n\t\t\t\t\t\t\tsetErrorHandling(true);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Spinner isSmall inButton isGrow /> loading...\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t'Save'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Button>\n\t\t\t\t</ModalFooter>\n\t\t\t</Modal>\n\t\t);\n\t}\n\treturn null;\n};\n\nAddmodal.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tisOpen: PropTypes.bool.isRequired,\n\tsetIsOpen: PropTypes.func.isRequired,\n};\n\nexport default Addmodal;\n","import React, { FC, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport dayjs from 'dayjs';\nimport * as Yup from 'yup';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport Modal, {\n\tModalBody,\n\tModalFooter,\n\tModalHeader,\n\tModalTitle,\n} from '../../../../components/bootstrap/Modal';\nimport data from '../../../../common/data/dummyCustomerData';\nimport showNotification from '../../../../components/extras/showNotification';\nimport Icon from '../../../../components/icon/Icon';\nimport FormGroup from '../../../../components/bootstrap/forms/FormGroup';\nimport Input from '../../../../components/bootstrap/forms/Input';\nimport Card, {\n\tCardBody,\n\tCardHeader,\n\tCardLabel,\n\tCardTitle,\n} from '../../../../components/bootstrap/Card';\nimport Button from '../../../../components/bootstrap/Button';\nimport Label from '../../../../components/bootstrap/forms/Label';\nimport Checks, { ChecksGroup } from '../../../../components/bootstrap/forms/Checks';\nimport PAYMENTS from '../../../../common/data/enumPaymentMethod';\nimport {\n\tcreateUser,\n\tfetchUser,\n\tfetchupdateUser,\n} from '../../../../redux/Slice/UserManagement_slice';\n\nimport { createProfile } from '../../../../redux/Api/UserManagement';\nimport { getColorNameWithIndex } from '../../../../common/data/enumColors';\nimport { getFirstLetter } from '../../../../helpers/helpers';\nimport useDarkMode from '../../../../hooks/useDarkMode';\nimport { getAllInterest } from '../../../../redux/Slice/IntersetSlice';\nimport { fetchRoles, update_Roles } from '../../../../redux/Slice/role_Slice';\nimport Spinner from '../../../../components/bootstrap/Spinner';\nimport { fetchModes, update_modes } from '../../../../redux/Slice/Modes_Slice';\nimport { getAll_Tag_categorys, update_tag_Categorys } from '../../../../redux/Slice/Tag_Category_Slice ';\nimport { getAll_Tag_SubCategorys, update_tag_SubCategorys } from '../../../../redux/Slice/Tag_Slice  ';\nimport { clippingParents } from '@popperjs/core';\n\ninterface ICustomerEditModalProps {\n\teditId: any;\n\teditData: any;\n\tid: string;\n\tisOpen: boolean;\n\tsetIsOpen(...args: unknown[]): unknown;\n}\nconst EditModal: FC<ICustomerEditModalProps> = ({ id, isOpen, editId, editData, setIsOpen }) => {\n\tconst { darkModeStatus } = useDarkMode();\n\tconst dispatch = useDispatch();\n\tconst modeid = localStorage.getItem('modeid');\n\tconst [errorHandling, setErrorHandling] = useState(false);\n\tconst [isLoading, setIsLoading] = useState<boolean>(false);\n\n\n\tconst stateCategory: any = useSelector((state: any) => state.TagCategory);\n\tconst CategoryData = stateCategory.modes.data\n\n\tconst stateMode: any = useSelector((state: any) => state.mode);\n\tconst ModeData = stateMode.modes.data\n\n\n\n\n\tconsole.log(\"check the data of category\", editData?.tag_category);\n\tuseEffect(() => {\n\t\tdispatch(fetchModes({}) as any);\n\t\tdispatch(getAll_Tag_categorys({}) as any);\n\t\tdispatch(getAll_Tag_SubCategorys({}) as any);\n\t}, [dispatch]);\n\n\tconst userValidation = Yup.object().shape({\n\t\tname: Yup.string().required('Name is required'),\n\t\tdisplay_name: Yup.string().required('Display name is required'),\n\t\tdescription: Yup.string().required('Description is required'),\n\t\tnote: Yup.string().required('Note is required'),\n\t\tadmin_note: Yup.string().required('Admin note is required'),\n\t});\n\n\t// const formik = useFormik({\n\t// \tinitialValues: {\n\t// \t\tname: editData.name || '',\n\t// \t\tdisplay_name: editData.display_name || '',\n\t// \t\tdescription: editData.description || '',\n\t// \t\tnote: editData.note || '',\n\t// \t\tadmin_note: editData.admin_note || '',\n\t// \t\ttag_category: editData.tag_category || '',\n\t// \t\tmode : editData.mode || '',\n\t// \t},\n\t// \tenableReinitialize: true,\n\t// \tvalidationSchema: userValidation,\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\tname: editData.name || '',\n\t\t\tdisplay_name: editData.display_name || '',\n\t\t\tdescription: editData.description || '',\n\t\t\tnote: editData.note || '',\n\t\t\tadmin_note: editData.admin_note || '',\n\t\t\ttagcategories_ids: editData.tagcategories_ids || [''],\n\t\t\tmode: editData.mode || '',\n\t\t},\n\t\tenableReinitialize: true,\n\t\tvalidationSchema: userValidation,\n\n\n\n\t\tonSubmit: async (values: any) => {\n\t\t\tsetIsLoading(true);\n\t\t\ttry {\n\t\t\t\tconst updatedTagCategories = values.tagcategories_ids.map((name: any, index: any) => ({\n\t\t\t\t\t_id: editData.tagcategories_ids[index]._id,\n\t\t\t\t\tname,\n\t\t\t\t}));\n\n\t\t\t\tconst updatedData = {\n\t\t\t\t\t...values,\n\t\t\t\t\ttagcategories_ids: updatedTagCategories,\n\t\t\t\t};\n\n\t\t\t\tsetErrorHandling(true);\n\t\t\t\tawait dispatch(update_tag_SubCategorys({ editId, values }) as any);\n\t\t\t\tsetIsLoading(false);\n\t\t\t\tdispatch(getAll_Tag_SubCategorys({}) as any);\n\t\t\t} catch (error) { }\n\t\t\tsetIsOpen(false);\n\t\t\tshowNotification(\n\t\t\t\t<span className='d-flex align-items-center '>\n\t\t\t\t\t<Icon icon='Info' size='lg' className='me-1' />\n\t\t\t\t\t<span>Update Successfully</span>\n\t\t\t\t</span>,\n\t\t\t\t'Tag has been Updated successfully',\n\t\t\t);\n\t\t}, \n\t});\n\n\tuseEffect(() => {\n\t\tdocument.body.style.overflow = isOpen ? 'hidden' : 'auto';\n\t\treturn () => {\n\t\t\tdocument.body.style.overflow = 'auto'; // Reset when the component unmounts\n\t\t};\n\t}, [isOpen]);\n\n\tif (id || id === '0') {\n\t\treturn (\n\t\t\t<Modal isOpen={isOpen} setIsOpen={setIsOpen} size='md' titleId={id.toString()}  >\n\n\t\t\t\t<ModalHeader setIsOpen={setIsOpen} className='p-4'>\n\t\t\t\t\t<ModalTitle id={id}>{editData.name + ' Edit' || 'Edit Mode'}</ModalTitle>\n\t\t\t\t</ModalHeader>\n\t\t\t\t<ModalBody className='px-4'>\n\t\t\t\t\t<div className='row g-4'>\n\t\t\t\t\t\t<FormGroup id='name' label='Name *' className='col-md-12'>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tname='name'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.name}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.name && formik.errors.name ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>{formik.errors.name as any}</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t\t<FormGroup id='display_name' label='Display Name *' className='col-md-12'>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tname='display_name'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.display_name}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.display_name && formik.errors.display_name ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>\n\t\t\t\t\t\t\t\t\t{formik.errors.display_name as any}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t\t<FormGroup id='description' label='Description *' className='col-md-12'>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tname='description'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.description}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.description && formik.errors.description ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>\n\t\t\t\t\t\t\t\t\t{formik.errors.description as any}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t\t<FormGroup id='note' label='Note *' className='col-md-12'>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tname='note'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.note}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.note && formik.errors.note ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>{formik.errors.note as any}</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t\t<FormGroup id='admin_note' label='Admin Note *' className='col-md-12'>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tname='admin_note'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.admin_note}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.admin_note && formik.errors.admin_note ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>\n\t\t\t\t\t\t\t\t\t{formik.errors.admin_note as any}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t{/* <FormGroup id='mode' label='Mode *' className='col-md-12'>\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tname='mode'\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tvalue={formik.values.mode.name} // Use the correct value\n\t\t\t\t\t\t\t\tclassName={`form-control ${formik.touched.mode && formik.errors.mode ? 'is-invalid' : ''}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value='' label='Select an option' />\n\t\t\t\t\t\t\t\t{SUBCategoryData.map((option :any) => (\n\t\t\t\t\t\t\t\t\t<option key={option.value} value={option.value}>\n\t\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t{formik.touched.mode && formik.errors.mode ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>\n\t\t\t\t\t\t\t\t\t{formik.errors.mode as any}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : <></>}\n\t\t\t\t\t\t</FormGroup> */}\n\t\t\t\t\t\t<FormGroup id='tagcategories_ids' label='Tag Categories *' className='col-md-6'>\n\t\t\t\t\t\t\t{formik.values.tagcategories_ids.map((categoryId: string, index: number) => (\n\t\t\t\t\t\t\t\t<div key={index} className='mb-2'>\n\t\t\t\t\t\t\t\t\t{/* <label>{`Category ${index + 1} *`}</label>s */}\n\t\t\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\t\t\tname={`tagcategories_ids[${index}]`}\n\t\t\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\t\t\tvalue={categoryId}\n\t\t\t\t\t\t\t\t\t\tclassName={`form-control ${formik.touched.tagcategories_ids && formik.errors.tagcategories_ids ? 'is-invalid' : ''}`}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<option value='' label='Select a category' />\n\t\t\t\t\t\t\t\t\t\t{CategoryData.map((item: any) => ( // Assume categoryOptions is an array of available categories\n\t\t\t\t\t\t\t\t\t\t\t<option key={item?._id} value={item?._id}>\n\t\t\t\t\t\t\t\t\t\t\t\t{item?.name}\n\t\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t{formik.touched.tagcategories_ids && formik.errors.tagcategories_ids ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>\n\t\t\t\t\t\t\t\t\t{formik.errors.tagcategories_ids as any}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t\t<FormGroup id='mode' label='MODE *' className='col-md-6'>\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tname='mode'\n\t\t\t\t\t\t\t\tonChange={(e) => formik.setFieldValue('mode', e.target.value)} // Handle mode selection\n\t\t\t\t\t\t\t\tvalue={formik.values.mode} // Set correct value for mode\n\t\t\t\t\t\t\t\tclassName={`form-control ${formik.touched.mode && formik.errors.mode ? 'is-invalid' : ''}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value='' label='Select an option' />\n\t\t\t\t\t\t\t\t{ModeData?.map((item: any) => (\n\t\t\t\t\t\t\t\t\t<option key={item?._id} value={item?._id}>\n\t\t\t\t\t\t\t\t\t\t{item?.name}\n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t{formik.touched.mode && formik.errors.mode ? (\n\t\t\t\t\t\t\t\t<div className='errorMassage'>{formik.errors.mode as any} </div>\n\t\t\t\t\t\t\t) : <></>}\n\t\t\t\t\t\t</FormGroup>\n\n\n\t\t\t\t\t</div>\n\t\t\t\t</ModalBody>\n\t\t\t\t<ModalFooter className='px-4 pb-4'>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor='info'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tformik.handleSubmit();\n\t\t\t\t\t\t\tsetErrorHandling(true);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Spinner isSmall inButton isGrow /> loading...\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t'Update'\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Button>\n\t\t\t\t</ModalFooter>\n\t\t\t</Modal>\n\t\t);\n\t}\n\treturn null;\n};\n\nEditModal.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tisOpen: PropTypes.bool.isRequired,\n\tsetIsOpen: PropTypes.func.isRequired,\n};\n\nexport default EditModal;\n","import React, { FC, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport dayjs from 'dayjs';\nimport Modal, {\n\tModalBody,\n\tModalFooter,\n\tModalHeader,\n\tModalTitle,\n} from '../../../../components/bootstrap/Modal';\nimport data from '../../../../common/data/dummyCustomerData';\nimport showNotification from '../../../../components/extras/showNotification';\nimport Icon from '../../../../components/icon/Icon';\nimport FormGroup from '../../../../components/bootstrap/forms/FormGroup';\nimport Input from '../../../../components/bootstrap/forms/Input';\nimport Card, {\n\tCardBody,\n\tCardHeader,\n\tCardLabel,\n\tCardTitle,\n} from '../../../../components/bootstrap/Card';\nimport Button from '../../../../components/bootstrap/Button';\nimport Label from '../../../../components/bootstrap/forms/Label';\nimport Checks, { ChecksGroup } from '../../../../components/bootstrap/forms/Checks';\nimport { fetchUser, fetchdeleteUser } from '../../../../redux/Slice/UserManagement_slice';\nimport { delete_Roles, fetchRoles } from '../../../../redux/Slice/role_Slice';\nimport getAllroles from '../../../../redux/Api/role';\nimport Spinner from '../../../../components/bootstrap/Spinner';\nimport { delete_modes, fetchModes } from '../../../../redux/Slice/Modes_Slice';\nimport { delete_tag_SubCategorys, getAll_Tag_SubCategorys } from '../../../../redux/Slice/Tag_Slice  ';\n// import PAYMENTS from '../../../common/data/enumPaymentMethod';\ninterface ICustomerEditModalProps {\n\tid: string;\n\tisOpen: boolean;\n\tsetIsOpen(...args: unknown[]): unknown;\n\tdeleteId: any;\n}\n\nconst DeleteModal: FC<ICustomerEditModalProps> = ({ id, isOpen, deleteId, setIsOpen }) => {\n\tconst dispatch = useDispatch();\n\tconst modeid = localStorage.getItem('modeid');\n\tconst [isLoading, setIsLoading] = useState<boolean>(false);\n\n\tconst handleDeleteClick = async () => {\n\t\tsetIsLoading(true);\n\t\ttry {\n\t\t\tawait dispatch(delete_tag_SubCategorys(deleteId) as any);\n\t\t\tsetIsOpen(false);\n\t\t\tdispatch(getAll_Tag_SubCategorys({}) as any);\n\n\t\t\tsetIsLoading(false);\n\t\t} catch (error) {\n\t\t} finally {\n\t\t}\n\t};\n\tif (id || id === '0') {\n\t\treturn (\n\t\t\t<Modal isOpen={isOpen} setIsOpen={setIsOpen} isCentered titleId={id.toString()}>\n\t\t\t\t<ModalHeader setIsOpen={setIsOpen} className='p-4'>\n\t\t\t\t\t<ModalTitle id={id}>Remove Mode</ModalTitle>\n\t\t\t\t</ModalHeader>\n\t\t\t\t<ModalBody className='px-4'>\n\t\t\t\t\t<p>Are you sure you want to Remove this mode?</p>\n\t\t\t\t</ModalBody>\n\t\t\t\t<ModalFooter className='bg-transparent '>\n\t\t\t\t\t<div className='d-flex  justify-content-between w-100'>\n\t\t\t\t\t\t<Button color='info' className='w-50 m-2 ' onClick={() => setIsOpen(false)}>\n\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName='w-50 m-2 btn btn-danger'\n\t\t\t\t\t\t\tonClick={() => handleDeleteClick()}>\n\t\t\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Spinner isSmall inButton isGrow /> loading...\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t'Yes'\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</ModalFooter>\n\t\t\t</Modal>\n\t\t);\n\t}\n\treturn null;\n};\nDeleteModal.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tisOpen: PropTypes.bool.isRequired,\n\tsetIsOpen: PropTypes.func.isRequired,\n};\n\nexport default DeleteModal;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PageWrapper from \"../../../../layout/PageWrapper/PageWrapper\";\nimport Button from \"../../../../components/bootstrap/Button\";\nimport Card, { CardBody } from \"../../../../components/bootstrap/Card\";\nimport Dropdown, { DropdownItem, DropdownMenu, DropdownToggle } from \"../../../../components/bootstrap/Dropdown\";\nimport Spinner from \"../../../../components/bootstrap/Spinner\";\nimport {\n\n  getAll_Tag_SubCategorys,\n  upload_tag_Images,\n} from \"../../../../redux/Slice/Tag_Slice  \";\nimport PaginationButtons, {\n  dataPagination,\n  PER_COUNT,\n} from \"../../../../components/PaginationButtons\";\nimport { Auth_Login_With_Modes } from \"../../../../redux/Slice/AuthSlice\";\nimport showNotification from \"../../../../components/extras/showNotification\";\nimport Addmodal from \"./AddTag\";\nimport EditTagModal from \"./Tag_Edit\";\nimport DeleteModal from \"./Delete\";\nimport { getColorNameWithIndex } from \"../../../../common/data/enumColors\";\nimport useDarkMode from \"../../../../hooks/useDarkMode\";\n// import { Icon } from \"../../../../components/icon/Icon\";\nimport { getAll_Tag_categorys } from \"../../../../redux/Slice/Tag_Category_Slice \";\nimport { getFirstLetter } from \"../../../../helpers/helpers\";\nimport useSortableData from \"../../../../hooks/useSortableData\";\n\n\nconst ServicesRole = () => {\n  const { darkModeStatus } = useDarkMode();\n  const dispatch = useDispatch();\n  const [currentUploadId, setCurrentUploadId] = useState<string | null>(null);\n  const [previewImage, setPreviewImage] = useState<any>('');\n  const [isUploading, setIsUploading] = useState<boolean>(false);\n  const [editModal, setEditModal] = useState<boolean>(false);\n  const [editData, setEditData] = useState<any>(null);\n  const [editId, setEditId] = useState<any>(null);\n  const [editModalStatus, setEditModalStatus] = useState<boolean>(false);\n  const [deleteModal, setDeleteModal] = useState<boolean>(false);\n  const [deleteId, setDeleteId] = useState<any>(null);\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(PER_COUNT[\"10\"]);\n\n\n  useEffect(() => {\n    dispatch(getAll_Tag_categorys({}) as any);\n    dispatch(getAll_Tag_SubCategorys({}) as any);\n\n    // Load stored image from local storage\n    const storedImage = localStorage.getItem(\"uploadedImage\");\n    if (storedImage) {\n      setPreviewImage(storedImage);\n    }\n  }, [dispatch]);\n\n\n\n  const stateSubcategory: any = useSelector((state: any) => state.Tag);\n  // const SUBCategoryData = stateSubcategory?.modes?.data;\n  const SUBCategoryData = Array.isArray(stateSubcategory?.modes?.data?.data) ? stateSubcategory.modes.data?.data : [];\n\n  console.log(SUBCategoryData, \"ioioioio\");\n\n  const handleImageUpload = async (item: any, file: File) => {\n    if (!file) return;\n\n    const id = item._id;\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"tagId\", id);\n\n    setIsUploading(true);\n    setPreviewImage(URL.createObjectURL(file)); // Immediate preview\n\n    try {\n      const res = await dispatch(upload_tag_Images({ id, formData }) as any);\n    dispatch(getAll_Tag_SubCategorys({}) as any);\n\n      if (res.payload.isSuccess) {\n        localStorage.setItem(\"uploadedImage\", res.payload.imageUrl);\n        setPreviewImage(res.payload.imageUrl); // Update preview after upload success\n      }\n    } catch (error) {\n      console.error(\"Failed to upload image:\", error);\n    } finally {\n      setIsUploading(false); // Hide loading indicator\n    }\n  };\n\n  const formik = useFormik({\n\t\tinitialValues: {\n\t\t\tsearchInput: '',\n\t\t\t// payment: Object.keys(PAYMENTS).map((i) => PAYMENTS[i].name),\n\t\t\tminPrice: '',\n\t\t\tmaxPrice: '',\n\t\t},\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\tonSubmit: (values) => {\n\t\t\t// alert(JSON.stringify(values, null, 2));\n\t\t},\n\t});\n\n\n  const filteredData = SUBCategoryData ? SUBCategoryData.filter((f: any) =>\n\t\tf.name.toLowerCase().includes(formik.values.searchInput.toLowerCase()) \n\t) : [];\n\tconst { items, requestSort, getClassNamesFor } = useSortableData(filteredData.reverse());\n\n  // const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   const file = event.target.files?.[0];\n  //   if (file && currentUploadId) {\n  //     handleImageUpload(currentUploadId, file);\n  //   }\n  // };\n\n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && currentUploadId) {\n      await handleImageUpload(currentUploadId, file);\n      // You can add any additional logic here that should run after the upload is complete\n    }\n  };\n\n  return (\n    <PageWrapper title=\"Tags\">\n      <div className=\"row\">\n        <div className=\"col-md-8\">\n          <span className=\"display-5 fw-bold my-3 mx-3\">Tags</span>\n        </div>\n        <div className=\"col-md-4 my-3\">\n          <Button\n            icon='PersonAdd'\n            color='primary'\n            isLight\n            onClick={() => setEditModalStatus(true)}>\n            New Tag\n          </Button>\n        </div>\n      </div>\n\n      <Card stretch>\n        <CardBody isScrollable className=\"table-responsive\">\n          <table className=\"table table-modern table-hover\">\n            <thead>\n              <tr>\n                <th onClick={() => requestSort('name')}>Tags Name</th>\n                <th>Discription</th>\n                <th>Tag Category</th>\n                <th> Mode</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {SUBCategoryData && dataPagination(items, currentPage, perPage).map((item: any, index: any) => (\n                <tr key={item?._id}>\n                  <td>\n                    <div className=\"d-flex align-items-center\">\n                      <div className=\"flex-shrink-0\">\n                        <div className=\"ratio ratio-1x1 me-3\" style={{ width: 48 }}>\n                          <div className={`bg-l${darkModeStatus ? \"o25\" : \"25\"}-${getColorNameWithIndex(index)} text-${getColorNameWithIndex(index)} rounded-2 d-flex align-items-center justify-content-center`}>\n                            <span\n                              className=\"fw-bold\"\n                              onClick={() => {\n                                if (fileInputRef.current) {\n                                  setCurrentUploadId(item);\n                                  fileInputRef.current.click();\n                                }\n                              }}\n                            >\n                              {item?.avatar ? (\n                                <img src={`https://servicesapi.meander.software/${item.avatar}`} style={{ width: \"50px\", borderRadius: \"15px\" }} />\n                              ) : (\n                                getFirstLetter(item?.name)\n                              )}\n                            </span>\n                            <input\n                              type=\"file\"\n                              ref={fileInputRef}\n                              style={{ display: \"none\" }}\n                              onChange={handleFileChange}\n                            />\n                          </div>\n                          {isUploading && <Spinner isSmall />}\n\n                        </div>\n                      </div>\n                      <div className=\"flex-grow-1\">\n                        <div className=\"fs-6 fw-bold\">{item?.name}</div>\n                        <div className=\"text-muted\">\n                          <small>{item?.is_activated}</small>\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td>{item?.description}</td>\n                  <td> {item?.tagcategories_ids[0]?.name || \"\"}</td>\n\n                  <td>\n                    {item?.mode?.name}\n                  </td>\n                  <td>\n                    <Dropdown>\n                      <DropdownToggle hasIcon={false}>\n                        <Button icon='MoreHoriz' color='dark' isLight shadow='sm' aria-label='More actions' />\n                      </DropdownToggle>\n                      <DropdownMenu isAlignmentEnd>\n                        <DropdownItem>\n                          <Button\n                            icon='Edit'\n                            onClick={() => {\n                              setEditData(item);\n                              setEditModal(true);\n                              setEditId(item?._id);\n                            }}\n                          >\n                            Edit\n                          </Button>\n                        </DropdownItem>\n                        <DropdownItem>\n                          <Button\n                            icon='Delete'\n                            onClick={() => {\n                              setDeleteModal(true);\n                              setDeleteId(item?._id);\n                            }}\n                          >\n                            Delete\n                          </Button>\n                        </DropdownItem>\n                      </DropdownMenu>\n                    </Dropdown>\n                  </td>\n \n                </tr>\n\n              ))}\n            </tbody>\n          </table>\n        </CardBody>\n        {SUBCategoryData &&<PaginationButtons\n          data={items || []}\n          label=\"Tags\"\n          setCurrentPage={setCurrentPage}\n          currentPage={currentPage}\n          perPage={perPage}\n          setPerPage={setPerPage}\n        />}\n      </Card>\n\n      {<Addmodal setIsOpen={setEditModalStatus} isOpen={editModalStatus} id='0' />}\n      {editId && <EditTagModal setIsOpen={setEditModal} isOpen={editModal} editData={editData} editId={editId} id=\"0\" />}\n      {deleteId && (\n        <DeleteModal\n          setIsOpen={setDeleteModal}\n          isOpen={deleteModal}\n          deleteId={deleteId}\n          id=\"0\"\n        />\n      )}\n    </PageWrapper>\n  );\n};\n\nexport default ServicesRole;\n\n"],"names":["PER_COUNT","dataPagination","data","currentPage","perPage","totalItems","length","startIndex","endIndex","slice","Math","max","min","reverse","PaginationButtons","_ref","setCurrentPage","setPerPage","label","totalPage","ceil","_jsxs","CardFooter","children","_jsx","CardFooterLeft","className","getInfo","start","end","CardFooterRight","Pagination","ariaLabel","PaginationItem","isFirst","isDisabled","onClick","isPrev","pagination","items","i","push","isActive","isNext","isLast","Select","size","onChange","e","parseInt","target","value","toString","Object","keys","map","Option","defaultProps","disabled","ariaLabelledby","props","undefined","Options","_ref2","list","item","text","forwardRef","ref","classNames","active","role","onKeyDown","tabIndex","Icon","icon","displayName","id","name","required","placeholder","ariaDescribedby","multiple","title","defaultValue","isValid","isTouched","invalidFeedback","validFeedback","isValidMessage","isTooltipFeedback","onBlur","onFocus","onInput","onInvalid","onSelect","_Fragment","hidden","Validation","isTooltip","config","arguments","sortConfig","setSortConfig","useState","useMemo","sortableItems","sort","a","b","key","direction","requestSort","getClassNamesFor","_stateCategory$modes","_stateMode$modes","isOpen","setIsOpen","darkModeStatus","useDarkMode","dispatch","useDispatch","errorHandling","setErrorHandling","localStorage","getItem","isLoading","setIsLoading","stateCategory","useSelector","state","TagCategory","CategoryData","Array","isArray","modes","stateMode","mode","ModeData","useEffect","fetchModes","getAll_Tag_categorys","userValidation","Yup","shape","display_name","description","note","admin_note","formik","useFormik","initialValues","tagcategories_ids","_id","enableReinitialize","validationSchema","onSubmit","async","create_tag_SubCategorys","values","getAll_Tag_SubCategorys","error","showNotification","Modal","titleId","ModalHeader","ModalTitle","ModalBody","FormGroup","Input","handleChange","touched","errors","setFieldValue","index","ModalFooter","Button","color","handleSubmit","Spinner","isSmall","inButton","isGrow","editId","editData","console","log","tag_category","updatedTagCategories","update_tag_SubCategorys","document","body","style","overflow","categoryId","deleteId","isCentered","delete_tag_SubCategorys","handleDeleteClick","ServicesRole","_stateSubcategory$mod","_stateSubcategory$mod2","_stateSubcategory$mod3","currentUploadId","setCurrentUploadId","previewImage","setPreviewImage","isUploading","setIsUploading","editModal","setEditModal","setEditData","setEditId","editModalStatus","setEditModalStatus","deleteModal","setDeleteModal","setDeleteId","fileInputRef","useRef","storedImage","stateSubcategory","Tag","SUBCategoryData","searchInput","minPrice","maxPrice","filteredData","filter","f","toLowerCase","includes","useSortableData","handleFileChange","_event$target$files","file","event","files","formData","FormData","append","URL","createObjectURL","res","upload_tag_Images","payload","isSuccess","setItem","imageUrl","handleImageUpload","PageWrapper","isLight","Card","stretch","CardBody","isScrollable","_item$tagcategories_i","_item$mode","width","getColorNameWithIndex","current","click","avatar","src","borderRadius","getFirstLetter","type","display","is_activated","Dropdown","DropdownToggle","hasIcon","shadow","DropdownMenu","isAlignmentEnd","DropdownItem","Addmodal","EditTagModal","DeleteModal"],"sourceRoot":""}